{"version":3,"sources":["images/rmdbLogo.svg","images/tmdb_logo.svg","components/Header/Header.style.js","components/Header/index.js","config.js","API.js","components/HeroImage/HeroImage.style.js","components/HeroImage/index.js","components/Grid/Grid.style.js","components/Grid/index.js","hooks/useHomeFetch.js","images/no_image.jpg","components/Thumb/Thumb.styles.js","components/Thumb/index.js","components/Spinner/index.js","components/Spinner/Spinner.styles.js","components/SearchBar/SearchBar.styles.js","images/search-icon.svg","components/SearchBar/index.js","components/Button/Button.styles.js","components/Button/index.js","components/Home.js","GlobalStyle.js","components/BreadCrumb/BreadCrumb.styles.js","components/BreadCrumb/index.js","components/MovieInfo/MovieInfo.styles.js","components/MovieInfo/index.js","helpers.js","components/MovieInfoBar/MovieInfoBar.style.js","components/MovieInfoBar/index.js","components/Actor/Actor.styles.js","components/Actor/index.js","components/Movie.js","hooks/useMovieFetch.js","components/NotFound.js","App.js","index.js"],"names":["Wrapper","styled","div","Content","LogoImg","img","TmdbLogoImg","Header","to","src","RMDBLogo","alt","TMDBLogo","API_URL","API_KEY","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","defaultConfig","method","headers","apiSettings","fetchMovies","searchTerm","page","a","endpoint","fetch","json","fetchMovie","movieId","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","rateMovie","value","rating","image","TextContainer","HeroImage","title","text","Grid","header","children","initialState","results","total_pages","total_result","Image","Thumb","clickable","Spinner","SearchBar","setSearchTerm","useState","state","setState","initial","useRef","useEffect","current","timer","setTimeout","clearTimeout","searchIcon","type","placeholder","onChange","event","target","button","Button","callback","onClick","Home","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","console","log","API","movies","prev","useHomeFetch","backdrop_path","original_title","overview","map","el","poster_path","noImage","id","GlobalStyle","createGlobalStyle","BreadCrumb","movieTitle","backDrop","Text","MovieInfo","movie","directors","length","className","vote_average","name","credit_id","calcTime","time","hours","Math","floor","mins","convertMoney","money","Intl","NumberFormat","style","currency","minimumFractionDigits","format","MovieInfoBar","budget","revenue","Actor","character","image_url","Movie","loadingState","setLoadingState","credits","crew","filter","job","actors","cast","fetchData","useMovieFetch","useParams","runtime","profile_path","NotFound","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18999e0b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/rmdbLogo.42955eb6.svg\";","export default __webpack_public_path__ + \"static/media/tmdb_logo.f15b6632.svg\";","import styled from \"styled-components\";\nexport const Wrapper = styled.div`\n    background: var(--darkGrey);\n    padding: 0 20px;\n\n`\n\nexport const Content = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    max-width: var(--maxWidth);\n    padding: 20px 0;\n    margin: 0 auto;\n`\n\nexport const LogoImg = styled.img`\n    width: 200px;\n\n\n    @media screen and (max-width: 500px){\n        width: 150px;\n    }\n\n`\n\nexport const TmdbLogoImg = styled.img`\n    width: 100px;\n\n    @media screen and (max-width: 500px){\n        width: 80px;\n    }\n`","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport RMDBLogo from '../../images/rmdbLogo.svg'\nimport TMDBLogo from '../../images/tmdb_logo.svg'\n\n\nimport { Wrapper,Content, TmdbLogoImg, LogoImg } from './Header.style'\n\nconst Header = function(){\n    return (\n        <Wrapper>\n            <Content>\n                <Link to = '/'>\n                <LogoImg src = {RMDBLogo} alt = \"rmdb logo\" />\n                </Link>\n                <TmdbLogoImg src = {TMDBLogo} alt = \"tmdb logo\" />\n            </Content>\n        </Wrapper>\n    )\n}\n\nexport default Header","// Configuration for TMDB API\n// Read more about the API here: https://developers.themoviedb.org/\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'ec4723fa33fddc10d7efae9134792c55';\n\nconst SEARCH_BASE_URL = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\nconst POPULAR_BASE_URL = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\n// For login and voting\nconst REQUEST_TOKEN_URL = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\nconst LOGIN_URL = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\nconst SESSION_ID_URL = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\n\nconst IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\n// Sizes: w300, w780, w1280, original\nconst BACKDROP_SIZE = 'w1280';\n// w92, w154, w185, w342, w500, w780, original\nconst POSTER_SIZE = 'w780';\n\nexport {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  IMAGE_BASE_URL,\n  BACKDROP_SIZE,\n  POSTER_SIZE,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n};\n","import {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL\n} from './config';\n\nconst defaultConfig = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n\nconst apiSettings = {\n  fetchMovies: async (searchTerm, page) => {\n    const endpoint = searchTerm\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\n      : `${POPULAR_BASE_URL}&page=${page}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchMovie: async movieId => {\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchCredits: async movieId => {\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n  // Bonus material below for login\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken, username, password) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken\n    };\n    // First authenticate the requestToken\n    const data = await (\n      await fetch(LOGIN_URL, {\n        ...defaultConfig,\n        body: JSON.stringify(bodyData)\n      })\n    ).json();\n    // Then get the sessionId with the requestToken\n    if (data.success) {\n      const sessionId = await (\n        await fetch(SESSION_ID_URL, {\n          ...defaultConfig,\n          body: JSON.stringify({ request_token: requestToken })\n        })\n      ).json();\n      return sessionId;\n    }\n  },\n  rateMovie: async (sessionId, movieId, value) => {\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\n\n    const rating = await (\n      await fetch(endpoint, {\n        ...defaultConfig,\n        body: JSON.stringify({ value })\n      })\n    ).json();\n\n    return rating;\n  }\n};\n\nexport default apiSettings;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    background: linear-gradient(to bottom, rgba(0,0,0,0)\n                                 41%, rgba(0,0,0,0.65)\n                                 100%), \n                                 url(${({image}) => image}), var(--darkGrey);\n    background-size: 100%, cover;\n    background-position: center;\n    height: 600px;\n    position: relative;\n    animation: animateHero 1s;\n\n    @keyframes animateHero{\n        from{\n            opacity: 0;\n        }\n        to{\n            opacity: 1;\n        }\n    }\n`\n\nexport const Content = styled.div`\n    padding: 20px;\n    max-width: var(--maxWidth);\n    margin: 0 auto;\n`\n\nexport const TextContainer = styled.div`\n    z-index: 10;\n    max-width: 700px;\n    position: absolute;\n    bottom: 40px;\n    margin-right: 20px;\n    min-width: 100px;\n    color: var(--white);\n\n    h1{\n        font-size: var(--fontSuperBig);\n\n        @media screen and (max-width: 720px){\n            font-size: var(--fontBig);\n        }\n    }\n\n    p{\n        font-size: var(--fontMed);\n\n        @media screen and (max-width: 720px){\n            font-size: var(--fontSmall);\n        }\n    }\n\n    @media screen and (max-width: 720px){\n        max-width: 100%;\n    }\n\n`","import { TextContainer, Wrapper, Content } from \"./HeroImage.style\";\n\nconst HeroImage = ({image,title,text}) => {\n    return (\n        <Wrapper image = {image}>\n            <Content>\n                <TextContainer>\n                    <h1>{title}</h1>\n                    <p>{text}</p>\n                    <img src=\"\" alt=\"\" />\n                </TextContainer>\n            </Content>\n        </Wrapper>\n    )\n}\n\nexport default HeroImage;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    max-width: var(--maxWidth);\n    margin: 0 auto;\n    padding: 0 20px;\n\n    h1{\n        color: var(--medGrey);\n        @media screen and (max-width: 768px){\n            font-size: var(--fontBig);\n        }\n\n    }\n\n    \n`\n\nexport const Content = styled.div`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px,1fr));\n    grid-gap: 2rem;\n`","import React from 'react'\nimport { Wrapper,Content } from '../Grid/Grid.style'\n\nconst Grid = ({header, children}) => {\n    return (\n        <Wrapper>\n            <h1>{header}</h1>\n            <Content>\n                {children}\n            </Content>\n        </Wrapper>\n    )\n}\n\nexport default Grid\n","import { useState , useEffect, useRef} from 'react';\nimport API from '../API'\n\nconst initialState = {\n    page: 0,\n    results: [],\n    total_pages: 0,\n    total_result: 0,\n}\n\nexport const useHomeFetch = () => {\n    const [state, setState] = useState(initialState);\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(false)\n    const [searchTerm, setSearchTerm] = useState('')\n    const [isLoadingMore, setIsLoadingMore] = useState(false)\n\n    console.log(searchTerm)\n\n    const fetchMovies = async function(page, searchTerm = \"\"){\n        try{\n            setError(false)\n            setLoading(true)\n\n            const movies = await API.fetchMovies(searchTerm, page)\n            \n            console.log(movies)\n\n            setState(prev => ({\n                ...movies,\n                results: \n                   page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n            }))\n\n        }catch(err){\n            setError(true)\n        }\n        setLoading(false)\n    }\n\n    //search and intial\n    useEffect(() => {\n        setState(initialState)\n        fetchMovies(1,searchTerm)\n    },[searchTerm])\n\n    useEffect(() => {\n\n        if(!isLoadingMore) return\n        fetchMovies(state.page+1, searchTerm)\n        setIsLoadingMore(false)\n    },[isLoadingMore, searchTerm, state.page])\n\n    return {state, loading, error, searchTerm, setSearchTerm , setIsLoadingMore}\n}","export default __webpack_public_path__ + \"static/media/no_image.22d2aa4d.jpg\";","import styled from \"styled-components\";\n\nexport const Image =  styled.img`\n    width: 100%;\n    max-width: 720px;\n    transition: all .3s;\n    object-fit: cover;\n    border-radius: 20px;\n    animation: animateThumb .5s;\n\n    :hover{\n        opacity: .8;\n    }\n    @keyframes animateThumb{\n        from{\n            opacity: 0;\n        }\n        to{\n            opacity: 1;\n        }\n    }\n`","import React from 'react'\nimport { Image } from './Thumb.styles'\nimport { Link } from 'react-router-dom'\n\nconst Thumb = ({image, movieId, clickable}) => {\n    return (\n        <div>\n            {clickable ? \n                <Link to = {`/${movieId}`}>\n                    <Image src = {image} alt = 'movie ThumbNail'/>\n                </Link>\n                :\n                <Image src = {image} alt = 'movie ThumbNail'/>\n                }\n            \n        </div>\n    )\n}\n\nexport default Thumb\n","import { Spinner } from \"./Spinner.styles\";\nexport default Spinner","import styled from \"styled-components\";\n\nexport const Spinner = styled.div`\n    border: 5px solid var(--lightGrey);\n    border-top: 5px solid var(--medGrey);\n    border-radius: 50%;\n    width: 50px;\n    height: 50px;\n\n    animation: spin .8s linear infinite;\n    margin: 20px auto;\n\n    @keyframes spin{\n        0%{\n            transform: rotate(0deg);\n        }\n\n        100%{\n            transform: rotate(360deg);\n        }\n    }\n\n    \n`","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    height: 100px;\n    background: var(--darkGrey);\n    padding: 0 20px;\n`\n\nexport const Content = styled.div`\n    position: relative;\n    max-width: var(--maxWidth);\n    width: 100%;\n    height: 55px;\n    background: var(--medGrey);\n    margin: 0 auto;\n    border-radius: 40px;\n    color: var(--white);\n\n    img{\n        position: absolute;\n        left: 15px;\n        top: 14px;\n        width: 30px;\n    }\n\n    input{\n        position: absolute;\n        left: 0;\n        margin: 8px 0;\n        padding: 0 0 0 60px;\n        border: 0;\n        width: 95%;\n        background: transparent;\n        height:40px;\n        color: var(--white);\n        outline: none;\n        font-size: var(--fontBig);\n    }\n`","export default __webpack_public_path__ + \"static/media/search-icon.cd820f5a.svg\";","import { Wrapper, Content } from '../SearchBar/SearchBar.styles'\nimport searchIcon from '../../images/search-icon.svg'\n\nimport React, {useState,useEffect, useRef} from 'react'\n\nconst SearchBar = ({ setSearchTerm }) => {\n\n    const [state, setState] = useState(\"\")\n    const initial = useRef(true)\n\n    useEffect(()=>{\n\n        if(initial.current){\n            initial.current=false;\n            return\n        }\n        \n        const timer = setTimeout(() => {\n            setSearchTerm(state)\n        }, 500);\n\n        return () => clearTimeout(timer)\n    },[setSearchTerm,state])\n\n    return (\n        <Wrapper>\n            <Content>\n                <img src={searchIcon} alt=\"search-icon\" />\n                <input type=\"text\" \n                placeholder=\"Search Movies\"\n                onChange = {event => setState(event.target.value)}\n                value = {state}\n                />\n            </Content>\n            \n        </Wrapper>\n    )\n}\n\nexport default SearchBar\n","import styled from \"styled-components\";\nexport const Wrapper = styled.button`\n    display: block;\n    background: var(--darkGrey);\n    width: 25%;\n    max-width: 200px;\n    height: 60px;\n    border-radius: 30px;\n    color: var(--white);\n    border: 0;\n    font-size: var(--fontBig);\n    margin: 20px auto;\n    transition: all .3s;\n    outline: none;\n    cursor: pointer;\n\n\n    :hover{\n        opacity: .8;\n    }\n`","import React from 'react'\nimport { Wrapper } from './Button.styles'\nconst Button = ({text, callback}) => {\n    return (\n        <Wrapper type = \"button\" onClick = {callback}>\n            {text}\n        </Wrapper>\n    )\n}\n\nexport default Button\n","import React,{ useState , useEffect} from 'react';\nimport API from '../API'\nimport HeroImage from './HeroImage';\nimport Grid from './Grid';\n\n\nimport { POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL} from '../config'\n\nimport { useHomeFetch } from '../hooks/useHomeFetch';\nimport noImage from '../images/no_image.jpg'\nimport Thumb from './Thumb';\nimport Spinner from './Spinner';\nimport SearchBar from './SearchBar';\nimport Button from './Button';\n\nconst Home = function(){\n    \n    const {state, loading, error,searchTerm, setSearchTerm, setIsLoadingMore} = useHomeFetch()\n\n    console.log(state)\n\n    if(error) return <div>Something Went Wrong</div>\n\n    return(\n       <> \n       {!searchTerm && state.results[0] ? \n        <HeroImage \n        //here comes the Proppppp.....\n        //hey prop\n        image = {`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\n        title = {state.results[0].original_title}\n        text = {state.results[0].overview}\n        /> \n        : null}\n        <SearchBar setSearchTerm = {setSearchTerm}/>\n        <Grid header = {searchTerm ? 'Search Result' : 'Popular Movies'}>\n            {state.results.map(el => {\n                return (\n                    <Thumb \n                    key = {el.id}\n                    clickable\n                    image = {\n                        el.poster_path ? IMAGE_BASE_URL + POSTER_SIZE + el.poster_path : noImage\n                    }\n                    movieId = {el.id}\n                    />\n                )\n            })}\n        </Grid>\n        {loading && <Spinner />}\n        {state.page < state.total_pages && !loading &&\n        <Button text = \"Load More\" callback = {() => setIsLoadingMore(true)}/>\n        }\n       </>\n\n    )\n}\n\nexport default Home","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n    :root {\n        --maxWidth: 1280px;\n        --white: #fff;\n        --lightGrey: #eee;\n        --medGrey: #353535;\n        --darkGrey: #1c1c1c;\n        --fontSuperBig: 2.5rem;\n        --fontBig: 1.5rem;\n        --fontMed: 1.2rem;\n        --fontSmall: 1rem;\n    }\n\n    *{\n        box-sizing: border-box;\n        font-family: 'Abel', sans-serif;\n    }\n\n    body{\n        margin: 0;\n        padding: 0;\n\n        h1{\n            font-size: 2rem;\n            font-weight: 600;\n            color: var(--white)\n        }\n\n        h3{\n            font-size: 1.1rem;\n            font-weight: 600;\n        }\n\n        p{\n            font-size: 1rem;\n            color: var(--white);\n        }\n    }\n`","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    width: 100%;\n    height: 70px;\n    background: var(--medGrey);\n    color: white;\n`\n\nexport const Content = styled.div`\n    display: flex;\n    width: 100%;\n    max-width: var(--maxWidth);\n    padding: 0 20px;\n\n    span{\n        font-size: var(--fontMed);\n        color: var(--white);\n        padding-right: 10px;\n\n        @media screen and (max-width: 768px){\n            font-size: var(--fontSmall)\n        }\n    }\n`","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Wrapper , Content} from './BreadCrumb.styles'\n\nconst BreadCrumb = ({movieTitle}) => {\n    return (\n        <Wrapper>\n            <Content>\n                <Link to = '/'>\n                    <span>Home</span>\n                </Link>\n                <span>|</span>\n                <span>{movieTitle}</span>\n            </Content>\n        </Wrapper>\n    )\n}\n\nexport default BreadCrumb\n","import styled from \"styled-components\";\nimport { IMAGE_BASE_URL, BACKDROP_SIZE} from \"../../config\";\n\nexport const Wrapper = styled.div`\n    background: ${({backDrop}) => backDrop ? `url(${IMAGE_BASE_URL}${BACKDROP_SIZE}${backDrop})` : '#000'};\n    background-size: cover;\n    background-position: center;\n    padding: 40px 20px;\n    animation: animateIt 1s;\n\n    @keyframes animateIt{\n        from{\n            opacity: 0;\n        }\n        to{\n            opacity: 1;\n        }\n    }\n`\n\nexport const Content = styled.div`\n    display: flex;\n    max-width: var(--maxWidth);\n    margin: 0 auto;\n    background: rgba(0,0,0,0.7);\n    border-radius: 20px;\n\n    @media screen and (max-width: 768px){\n        display: block;\n        max-height: none;\n    }\n\n`\nexport const Text = styled.div`\n    width: 100%;\n    padding: 20px 40px;\n    color: var(--white);\n    overflow: hidden;\n\n    .rating-director{\n        display: flex;\n        justify-content: flex-start;\n    }\n\n\n    .score{\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        width: 35px;\n        height: 35px;\n        background: #fff;\n        color: #000;\n        font-weight: 800;\n        border-radius: 50%;\n        margin: 0;\n\n    }\n\n    .director{\n        margin: 0 0 0 40px;\n\n         p{\n             margin: 0;\n         }\n\n         h1{\n             @media screen and (max-width: 768px){\n                 font-size: var(--fontBig);\n             }\n         }\n    }\n\n`","import React from 'react'\nimport Thumb from '../Thumb'\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../../config'\nimport noImage from '../../images/no_image.jpg'\nimport { Wrapper,  Content, Text} from '../MovieInfo/MovieInfo.styles'\n\nconst MovieInfo = ({movie}) => {\n    console.log(movie.directors.length)\n    return (\n        <Wrapper backDrop = {movie.backdrop_path}>\n            <Content>\n                <Thumb\n                image = {\n                    movie.poster_path ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}` : noImage\n                }\n                clickable = {false}\n                alt = \"movie-thumb\"\n                />\n                    <Text>\n                    <h1>{movie.title}</h1>\n                    <h3>PLOT</h3>\n                    <p>{movie.overview}</p>\n\n                    <div className=\"rating-director\">\n                        <div>\n                            <h3>RATING</h3>\n                            <div className=\"score\">{movie.vote_average}</div>\n                        </div>\n                        <div className=\"director\">\n                            <h1>DIRECTOR{movie.directors.length > 1 ? 'S' : ''}</h1>\n                            {movie.directors.map(el => {\n                                return (\n                                    <p key = {el.credit_id}>\n                                        {el.name}\n                                    </p>\n                                )\n                            })}\n                        </div>\n                    </div>\n                    </Text>\n            </Content>\n        </Wrapper>\n    )\n}\n\nexport default MovieInfo\n","// Convert time to hours and minutes\nexport const calcTime = time => {\n  const hours = Math.floor(time / 60);\n  const mins = time % 60;\n  return `${hours}h ${mins}m`;\n};\n// Convert a number to money formatting\nexport const convertMoney = money => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n  });\n  return formatter.format(money);\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper  = styled.div`\n    display: flex;\n   align-items: center;\n   min-height: 100px;\n   background: var(--darkGrey);\n   padding: 0 20px;\n`\n\nexport const Content = styled.div`\n    display: flex;\n    max-width: var(--maxWidth);\n    width: 100%;\n    margin: 0;\n\n    .column{\n        display: flex;\n        align-items: center;\n    justify-content: center;\n    background: var(--medGrey);\n\n    border-radius: 20px;\n    flex:1;\n    margin: 0 20px;\n\n    :first-child{\n        margin-left: 0;\n    }\n    :last-child{\n        margin-right: 0;\n    }\n\n    @media screen and (max-width: 768px){\n        display: block;\n\n        .column{\n            margin: 20px 0;\n        }\n    }\n}\n    \n`","import React from 'react'\nimport {calcTime, convertMoney}  from '../../helpers'\nimport { Wrapper, Content } from '../MovieInfoBar/MovieInfoBar.style'\n\nconst MovieInfoBar = ({time,budget,revenue}) => {\n    return (\n        <Wrapper>\n            <Content>\n                <div className=\"column\">\n                    <p>Running Time: {calcTime(time)}</p>\n                </div>\n                <div className=\"column\">\n                    <p>Budget: {convertMoney(budget)}</p>\n                </div>\n                <div className=\"column\">\n                    <p>Revenue: {convertMoney(revenue)}</p>\n                </div>\n            </Content>\n        </Wrapper>\n    )\n}\n\nexport default MovieInfoBar\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    color: var(--white);\n    background: var(--darkGrey);\n    border-radius: 20px;\n    padding: 5px;\n    text-align: center;\n\n    h3{\n        margin: 10px 0 0 0 ;\n    }\n\n    p{\n        margin: 5px 0;\n    }\n`\n\nexport const Image = styled.img`\n    display: block;\n    width: 100%;\n    height: 200px;\n    object-fit: cover;\n    border-radius: 15px;\n`","import React from 'react'\nimport { Image, Wrapper } from './Actor.styles'\n\nconst Actor = ({name, character, image_url}) => {\n    return (\n        <Wrapper>\n            <Image src = {image_url} alt = \"actor-thumb\" />\n            <h3>{name}</h3>\n            <p>{character}</p>\n        </Wrapper>\n    )\n}\n\nexport default Actor\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport { IMAGE_BASE_URL, POSTER_SIZE, } from '../config'\nimport Grid from './Grid'\nimport Spinner from './Spinner'\n//hook\nimport { useMovieFetch } from '../hooks/useMovieFetch'\nimport noImage from '../images/no_image.jpg'\nimport BreadCrumb from './BreadCrumb'\nimport MovieInfo from './MovieInfo'\nimport MovieInfoBar from './MovieInfoBar'\nimport Actor from './Actor'\nconst Movie = () => {\n    const {movieId} = useParams()\n\n    const {state: movie, loadingState ,error} = useMovieFetch(movieId)\n    if(loadingState) \n    return <Spinner/>\n    if(error) \n    return <div>something Went wrong</div>\n    \n    return (\n        <>\n        <BreadCrumb movieTitle = {movie.original_title}/>\n        <MovieInfo movie = {movie}/>\n        <MovieInfoBar time = {movie.runtime} budget = {movie.budget} revenue = {movie.revenue}/>\n        <Grid>\n            {movie.actors.map(el => {\n                return (\n                    <Actor key = {el.credit_id}\n                    name = {el.name}\n                    character = {el.character}\n                    image_url = {\n                        el.profile_path ? `${IMAGE_BASE_URL}${POSTER_SIZE}${el.profile_path}` : \n                        noImage\n                    }\n                    />\n                )\n            })}\n        </Grid>\n        </>\n    )\n}\n\nexport default Movie\n","import { useState, useEffect} from \"react\";\nimport API from '../API'\n\nexport const useMovieFetch  =  function(movieId){\n    const [state, setState] = useState({})\n    const [loadingState, setLoadingState] = useState(true)\n    const [error, setError] = useState(false)\n\n    useEffect(() => {\n        const fetchData = async function(){\n            try{\n                setLoadingState(true)\n                setError(false)\n                const movie = await API.fetchMovie(movieId)\n                const credits = await API.fetchCredits(movieId)\n               \n\n                const directors = credits.crew.filter(el => el.job === 'Director')\n    \n\n                setState({\n                    ...movie,\n                    actors: credits.cast,\n                    directors,\n                })\n\n                setLoadingState(false)\n            }catch(Err){\n                setError(true)\n            }\n        }\n        \n        fetchData()\n       \n        \n    }, [movieId]) \n    return {state, loadingState, error}\n}","import React from 'react'\n\nconst NotFound = () => {\n    return (\n        <div>\n            Movie Not Found\n        </div>\n    )\n}\n\nexport default NotFound\n","import React from 'react';\n//components\nimport Header from './components/Header/';\nimport Home from './components/Home';\nimport {BrowserRouter as Router, Routes, Route} from 'react-router-dom'\n//Styles\nimport {GlobalStyle } from './GlobalStyle'\nimport Movie from './components/Movie';\nimport NotFound from './components/NotFound';\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Routes>\n        <Route path = '/' element ={ <Home />}/>\n        <Route path = '/:movieId' element = { <Movie /> } />\n        <Route path = '/*' element = { <NotFound /> } />\n      </Routes>\n      <GlobalStyle />\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}